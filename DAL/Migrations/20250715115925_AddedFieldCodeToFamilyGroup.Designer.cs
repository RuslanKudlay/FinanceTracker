// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250715115925_AddedFieldCodeToFamilyGroup")]
    partial class AddedFieldCodeToFamilyGroup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Назва категорії");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("336cb732-14bf-4a99-95d5-6d0019002b50"),
                            DateCreate = new DateTime(2025, 7, 15, 14, 59, 24, 446, DateTimeKind.Local).AddTicks(4279),
                            DateUpdate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(3060),
                            Description = "Сплата громадського транспорту, таксі",
                            IsDeleted = false,
                            Name = "Транспорт"
                        },
                        new
                        {
                            Id = new Guid("34217df6-a259-4846-8fb6-e9fd09df9f85"),
                            DateCreate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4446),
                            DateUpdate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4460),
                            Description = "Сплата оренди за квартиру власнику",
                            IsDeleted = false,
                            Name = "Оренда квартири"
                        },
                        new
                        {
                            Id = new Guid("a04ef17c-05fe-4c9c-82f7-e7f170d2d824"),
                            DateCreate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4466),
                            DateUpdate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4467),
                            Description = "Електроенергія, тепло, ОСББ/ЖЕК, дофомон, ліфт, вода...",
                            IsDeleted = false,
                            Name = "Комунальні платежі"
                        },
                        new
                        {
                            Id = new Guid("fba26bb5-a04f-42cd-a23c-c4d67e0e1182"),
                            DateCreate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4471),
                            DateUpdate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4473),
                            Description = "Оплата за товари для харчування",
                            IsDeleted = false,
                            Name = "Харчування"
                        },
                        new
                        {
                            Id = new Guid("0422a38d-ffb7-41e7-aa9e-cd735c4fd2df"),
                            DateCreate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4530),
                            DateUpdate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4533),
                            Description = "Оплата за одяг, або інші речі (КОМФІ, ТА-ДА, АВРОРА)",
                            IsDeleted = false,
                            Name = "Шопінг"
                        },
                        new
                        {
                            Id = new Guid("f0869212-d701-4566-9e61-139c76c894a2"),
                            DateCreate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4555),
                            DateUpdate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4557),
                            Description = "Ремонт, ТО, заправка...",
                            IsDeleted = false,
                            Name = "Автомобіль"
                        },
                        new
                        {
                            Id = new Guid("dbc2eb13-bd69-469b-b72a-e503aff811f5"),
                            DateCreate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4561),
                            DateUpdate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4563),
                            Description = "Оплата тільки за одяг",
                            IsDeleted = false,
                            Name = "Одяг"
                        },
                        new
                        {
                            Id = new Guid("9c8b63bd-7f87-4856-bd98-d9dde4b45daa"),
                            DateCreate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4566),
                            DateUpdate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4568),
                            Description = "",
                            IsDeleted = false,
                            Name = "Краса та гігієна"
                        },
                        new
                        {
                            Id = new Guid("2164b3c0-472d-4d1b-9033-79554bd28db0"),
                            DateCreate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4572),
                            DateUpdate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4574),
                            Description = "Лікарні, аптеки",
                            IsDeleted = false,
                            Name = "Здоров'я"
                        },
                        new
                        {
                            Id = new Guid("9800d227-8f05-4440-a573-2939f29900b2"),
                            DateCreate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4579),
                            DateUpdate = new DateTime(2025, 7, 15, 14, 59, 24, 448, DateTimeKind.Local).AddTicks(4581),
                            Description = "Покупки для підвищення комфорту в житлі",
                            IsDeleted = false,
                            Name = "Житло"
                        });
                });

            modelBuilder.Entity("DAL.Entities.FamilyGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Назва групи");

                    b.HasKey("Id");

                    b.ToTable("FamilyGroups", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Mono.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<int>("Balance")
                        .HasColumnType("integer")
                        .HasColumnName("Balance")
                        .HasComment("Баланс");

                    b.Property<string>("CashbackType")
                        .HasColumnType("text")
                        .HasColumnName("CashbackType")
                        .HasComment("UAH, DOL, EURO...");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<int>("CreditLimit")
                        .HasColumnType("integer")
                        .HasColumnName("CreditLimit")
                        .HasComment("Кредитний ліміт");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("integer")
                        .HasColumnName("CurrencyCode")
                        .HasComment("Код валюти");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Iban")
                        .HasComment("Номер IBAN");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("MonoAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MonoAccountId")
                        .HasComment("Account id для транзакцій");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип карти");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Mono.CardMaskedPan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MaskedPan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("CardMaskedPan");
                });

            modelBuilder.Entity("DAL.Entities.Mono.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Name");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Permissions")
                        .HasComment("Permissions");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("UserId");

                    b.Property<string>("WebHookUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("WebHookUrl")
                        .HasComment("WebHookUrl");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип даних налаштування");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Опис");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Key")
                        .HasComment("Ключ налаштування");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Value")
                        .HasComment("Значення налаштування");

                    b.HasKey("Id");

                    b.ToTable("Settings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("441f3b9e-c955-4ca8-b6c5-59a31d2893f9"),
                            DataType = "String",
                            DateCreate = new DateTime(2025, 7, 15, 14, 59, 24, 454, DateTimeKind.Local).AddTicks(7568),
                            Description = "Токен для інтеграції з монобанк",
                            IsDeleted = false,
                            Key = "MonoToken",
                            Value = "DefaultValue"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("Amount")
                        .HasComment("Сума транзакції");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("Note")
                        .HasComment("Коментар до транзакції");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("Source")
                        .HasComment("Джерело транзакції");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("TransactionDate")
                        .HasComment("Дата транзакції");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип транзакції");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email")
                        .HasComment("Email");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("FullName")
                        .HasComment("Повне ім'я");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<bool>("IsVisibleInGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("IsVisibleInGroup")
                        .HasComment("Чи показувати в групі для спільного балансу");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash")
                        .HasComment("Хеш паролю");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.UserCategory", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId", "CategoryId")
                        .IsUnique();

                    b.ToTable("mm_users_categories", "many_to_many");
                });

            modelBuilder.Entity("DAL.Entities.UserFamilyGroup", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FamilyGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "FamilyGroupId");

                    b.HasIndex("FamilyGroupId");

                    b.HasIndex("UserId", "FamilyGroupId")
                        .IsUnique();

                    b.ToTable("mm_users_groups", "many_to_many");
                });

            modelBuilder.Entity("DAL.Entities.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип даних налаштування");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Опис");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Key")
                        .HasComment("Ключ налаштування");

                    b.Property<Guid?>("SettingId")
                        .HasColumnType("uuid")
                        .HasColumnName("SettingId")
                        .HasComment("Ключ налаштування");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("Ключ користвача");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Value")
                        .HasComment("Значення налаштування");

                    b.HasKey("Id");

                    b.HasIndex("SettingId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Mono.Account", b =>
                {
                    b.HasOne("DAL.Entities.Mono.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DAL.Entities.Mono.CardMaskedPan", b =>
                {
                    b.HasOne("DAL.Entities.Mono.Account", "Account")
                        .WithMany("CardMaskedPans")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DAL.Entities.Mono.Client", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.UserCategory", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.UserFamilyGroup", b =>
                {
                    b.HasOne("DAL.Entities.FamilyGroup", "FamilyGroup")
                        .WithMany()
                        .HasForeignKey("FamilyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.UserSetting", b =>
                {
                    b.HasOne("DAL.Entities.Setting", "Setting")
                        .WithMany()
                        .HasForeignKey("SettingId");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Setting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Mono.Account", b =>
                {
                    b.Navigation("CardMaskedPans");
                });

            modelBuilder.Entity("DAL.Entities.Mono.Client", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("UserCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
