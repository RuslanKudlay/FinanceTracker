// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250715121550_NullableCodeFamilyGroup")]
    partial class NullableCodeFamilyGroup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Назва категорії");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc5489b1-a320-4cac-9f45-37ec30275588"),
                            DateCreate = new DateTime(2025, 7, 15, 15, 15, 49, 441, DateTimeKind.Local).AddTicks(7476),
                            DateUpdate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(5432),
                            Description = "Сплата громадського транспорту, таксі",
                            IsDeleted = false,
                            Name = "Транспорт"
                        },
                        new
                        {
                            Id = new Guid("c39df8ae-68a3-48a8-9803-988aa84b5e13"),
                            DateCreate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6781),
                            DateUpdate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6795),
                            Description = "Сплата оренди за квартиру власнику",
                            IsDeleted = false,
                            Name = "Оренда квартири"
                        },
                        new
                        {
                            Id = new Guid("4dece3eb-9dfa-4b05-8cec-241fb4c09a3e"),
                            DateCreate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6800),
                            DateUpdate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6802),
                            Description = "Електроенергія, тепло, ОСББ/ЖЕК, дофомон, ліфт, вода...",
                            IsDeleted = false,
                            Name = "Комунальні платежі"
                        },
                        new
                        {
                            Id = new Guid("d201e74e-ed9b-45ce-967d-6fb69acdfd12"),
                            DateCreate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6805),
                            DateUpdate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6807),
                            Description = "Оплата за товари для харчування",
                            IsDeleted = false,
                            Name = "Харчування"
                        },
                        new
                        {
                            Id = new Guid("f1216c1a-5e1e-4c9d-9a6f-41c5d0ac0faf"),
                            DateCreate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6811),
                            DateUpdate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6813),
                            Description = "Оплата за одяг, або інші речі (КОМФІ, ТА-ДА, АВРОРА)",
                            IsDeleted = false,
                            Name = "Шопінг"
                        },
                        new
                        {
                            Id = new Guid("83ca0182-6d2c-43ad-9e3a-ec5241108260"),
                            DateCreate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6827),
                            DateUpdate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6829),
                            Description = "Ремонт, ТО, заправка...",
                            IsDeleted = false,
                            Name = "Автомобіль"
                        },
                        new
                        {
                            Id = new Guid("92f5aa1a-16c5-4137-a87f-231ad6e4430a"),
                            DateCreate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6833),
                            DateUpdate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6834),
                            Description = "Оплата тільки за одяг",
                            IsDeleted = false,
                            Name = "Одяг"
                        },
                        new
                        {
                            Id = new Guid("3f10c83e-db6d-4f92-959b-50bf20555cb6"),
                            DateCreate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6849),
                            DateUpdate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6851),
                            Description = "",
                            IsDeleted = false,
                            Name = "Краса та гігієна"
                        },
                        new
                        {
                            Id = new Guid("5d5a012c-84e4-47bf-8847-6388c4aab226"),
                            DateCreate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6855),
                            DateUpdate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6856),
                            Description = "Лікарні, аптеки",
                            IsDeleted = false,
                            Name = "Здоров'я"
                        },
                        new
                        {
                            Id = new Guid("c1f4396c-bc63-4757-ad49-6357a794d757"),
                            DateCreate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6861),
                            DateUpdate = new DateTime(2025, 7, 15, 15, 15, 49, 444, DateTimeKind.Local).AddTicks(6863),
                            Description = "Покупки для підвищення комфорту в житлі",
                            IsDeleted = false,
                            Name = "Житло"
                        });
                });

            modelBuilder.Entity("DAL.Entities.FamilyGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("Code")
                        .HasComment("Код групи");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Назва групи");

                    b.HasKey("Id");

                    b.ToTable("FamilyGroups", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Mono.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<int>("Balance")
                        .HasColumnType("integer")
                        .HasColumnName("Balance")
                        .HasComment("Баланс");

                    b.Property<string>("CashbackType")
                        .HasColumnType("text")
                        .HasColumnName("CashbackType")
                        .HasComment("UAH, DOL, EURO...");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<int>("CreditLimit")
                        .HasColumnType("integer")
                        .HasColumnName("CreditLimit")
                        .HasComment("Кредитний ліміт");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("integer")
                        .HasColumnName("CurrencyCode")
                        .HasComment("Код валюти");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Iban")
                        .HasComment("Номер IBAN");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("MonoAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MonoAccountId")
                        .HasComment("Account id для транзакцій");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип карти");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Mono.CardMaskedPan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MaskedPan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("CardMaskedPan");
                });

            modelBuilder.Entity("DAL.Entities.Mono.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Name");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Permissions")
                        .HasComment("Permissions");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("UserId");

                    b.Property<string>("WebHookUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("WebHookUrl")
                        .HasComment("WebHookUrl");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип даних налаштування");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Опис");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Key")
                        .HasComment("Ключ налаштування");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Value")
                        .HasComment("Значення налаштування");

                    b.HasKey("Id");

                    b.ToTable("Settings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("441f3b9e-c955-4ca8-b6c5-59a31d2893f9"),
                            DataType = "String",
                            DateCreate = new DateTime(2025, 7, 15, 15, 15, 49, 453, DateTimeKind.Local).AddTicks(2446),
                            Description = "Токен для інтеграції з монобанк",
                            IsDeleted = false,
                            Key = "MonoToken",
                            Value = "DefaultValue"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("Amount")
                        .HasComment("Сума транзакції");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("Note")
                        .HasComment("Коментар до транзакції");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("Source")
                        .HasComment("Джерело транзакції");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("TransactionDate")
                        .HasComment("Дата транзакції");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип транзакції");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email")
                        .HasComment("Email");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("FullName")
                        .HasComment("Повне ім'я");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<bool>("IsVisibleInGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("IsVisibleInGroup")
                        .HasComment("Чи показувати в групі для спільного балансу");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash")
                        .HasComment("Хеш паролю");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.UserCategory", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId", "CategoryId")
                        .IsUnique();

                    b.ToTable("mm_users_categories", "many_to_many");
                });

            modelBuilder.Entity("DAL.Entities.UserFamilyGroup", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FamilyGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "FamilyGroupId");

                    b.HasIndex("FamilyGroupId");

                    b.HasIndex("UserId", "FamilyGroupId")
                        .IsUnique();

                    b.ToTable("mm_users_groups", "many_to_many");
                });

            modelBuilder.Entity("DAL.Entities.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип даних налаштування");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Опис");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Key")
                        .HasComment("Ключ налаштування");

                    b.Property<Guid?>("SettingId")
                        .HasColumnType("uuid")
                        .HasColumnName("SettingId")
                        .HasComment("Ключ налаштування");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("Ключ користвача");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Value")
                        .HasComment("Значення налаштування");

                    b.HasKey("Id");

                    b.HasIndex("SettingId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Mono.Account", b =>
                {
                    b.HasOne("DAL.Entities.Mono.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DAL.Entities.Mono.CardMaskedPan", b =>
                {
                    b.HasOne("DAL.Entities.Mono.Account", "Account")
                        .WithMany("CardMaskedPans")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DAL.Entities.Mono.Client", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.UserCategory", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("UserCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.UserFamilyGroup", b =>
                {
                    b.HasOne("DAL.Entities.FamilyGroup", "FamilyGroup")
                        .WithMany()
                        .HasForeignKey("FamilyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.UserSetting", b =>
                {
                    b.HasOne("DAL.Entities.Setting", "Setting")
                        .WithMany()
                        .HasForeignKey("SettingId");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Setting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Mono.Account", b =>
                {
                    b.Navigation("CardMaskedPans");
                });

            modelBuilder.Entity("DAL.Entities.Mono.Client", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("UserCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
