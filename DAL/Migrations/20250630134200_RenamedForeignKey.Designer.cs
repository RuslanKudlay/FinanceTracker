// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250630134200_RenamedForeignKey")]
    partial class RenamedForeignKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Назва категорії");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Mono.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<int>("Balance")
                        .HasColumnType("integer")
                        .HasColumnName("Balance")
                        .HasComment("Баланс")
                        .HasAnnotation("Relational:JsonPropertyName", "balance");

                    b.Property<string>("CashbackType")
                        .HasColumnType("text")
                        .HasColumnName("CashbackType")
                        .HasComment("UAH, DOL, EURO...")
                        .HasAnnotation("Relational:JsonPropertyName", "cashbackType");

                    b.Property<Guid>("ClientGuidId")
                        .HasColumnType("uuid");

                    b.Property<int>("CreditLimit")
                        .HasColumnType("integer")
                        .HasColumnName("CreditLimit")
                        .HasComment("Кредитний ліміт")
                        .HasAnnotation("Relational:JsonPropertyName", "creditLimit");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("integer")
                        .HasColumnName("CurrencyCode")
                        .HasComment("Код валюти")
                        .HasAnnotation("Relational:JsonPropertyName", "currencyCode");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Iban")
                        .HasComment("Номер IBAN")
                        .HasAnnotation("Relational:JsonPropertyName", "iban");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("MaskedPan")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MaskedPan")
                        .HasComment("Масковані номери карт")
                        .HasAnnotation("Relational:JsonPropertyName", "maskedPan");

                    b.Property<string>("MonoClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "clientId");

                    b.Property<string>("MonoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MonoId")
                        .HasComment("Id акаунту в mono")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("SendId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SendId")
                        .HasComment("SendId")
                        .HasAnnotation("Relational:JsonPropertyName", "sendId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип карти")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("ClientGuidId");

                    b.ToTable("Accounts", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "accounts");
                });

            modelBuilder.Entity("DAL.Entities.Mono.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ClientId")
                        .HasComment("ClientId")
                        .HasAnnotation("Relational:JsonPropertyName", "clientId");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Name")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Permissions")
                        .HasComment("Permissions")
                        .HasAnnotation("Relational:JsonPropertyName", "permissions");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("UserId");

                    b.Property<string>("WebHookUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("WebHookUrl")
                        .HasComment("WebHookUrl")
                        .HasAnnotation("Relational:JsonPropertyName", "webHookUrl");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип даних налаштування");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Опис");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Key")
                        .HasComment("Ключ налаштування");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("Зовнішній ключ користувача");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Value")
                        .HasComment("Значення налаштування");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Settings", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("Amount")
                        .HasComment("Сума транзакції");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("Note")
                        .HasComment("Коментар до транзакції");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("Source")
                        .HasComment("Джерело транзакції");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("TransactionDate")
                        .HasComment("Дата транзакції");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип транзакції");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Первинний ключ");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateCreate")
                        .HasComment("Дата створення");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("DateUpdate")
                        .HasComment("Дата оновлення");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email")
                        .HasComment("Email");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("FullName")
                        .HasComment("Повне ім'я");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasComment("Прапор видалення");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash")
                        .HasComment("Хеш паролю");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Mono.Account", b =>
                {
                    b.HasOne("DAL.Entities.Mono.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientGuidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DAL.Entities.Mono.Client", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Setting", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Mono.Client", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
